@page "/"
@using System.ComponentModel.DataAnnotations
@inject UserService UserService
@inject NavigationManager Navigation
@inject UserState UserState
@inject IJSRuntime JS
@rendermode InteractiveServer

<h3>Login</h3>

@if (isSuccess)
{
    <p style="color:green;">Du er nu logget ind!</p>
}
else
{
    <EditForm EditContext="loginEditContext" OnValidSubmit="HandleLogin" FormName="loginForm">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div>
            <label>Brugernavn:</label>
            <InputText @bind-Value="loginModel.Username" id="username" class="form-control" />
            <ValidationMessage For="@(() => loginModel.Username)" />
        </div>

        <div>
            <label>Adgangskode:</label>
            <InputText @bind-Value="loginModel.Password" id="password" type="password" class="form-control" />
            <ValidationMessage For="@(() => loginModel.Password)" />
        </div>

        <button type="submit" id="loginBtn">Log ind</button>
    </EditForm>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <p style="color:red;">@errorMessage</p>
    }
}

<button id="goToRegister" @onclick="NavigateToRegister">Opret ny konto</button>

@code {
    private LoginModel loginModel = new();
    private EditContext loginEditContext;

    private bool isSuccess = false;
    private string errorMessage;

    protected override void OnInitialized()
    {
        loginEditContext = new EditContext(loginModel);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("eval", @"
                window.setLoginFields = (username, password) => {
                    const u = document.querySelector('#username');
                    const p = document.querySelector('#password');
                    if (u && p) {
                        u.value = username;
                        u.dispatchEvent(new Event('input', { bubbles: true }));
                        u.dispatchEvent(new Event('change', { bubbles: true }));

                        p.value = password;
                        p.dispatchEvent(new Event('input', { bubbles: true }));
                        p.dispatchEvent(new Event('change', { bubbles: true }));
                    }
                };

                window.clickGoToRegister = () => {
                    const btn = document.querySelector('#goToRegister');
                    if (btn) btn.click();
                };
            ");
        }
    }

    private async Task HandleLogin()
    {
        var result = await UserService.ValidateUserAsync(loginModel.Username, loginModel.Password);

        if (result)
        {
            UserState.SetUser(loginModel.Username);
            isSuccess = true;
            errorMessage = null;
            Navigation.NavigateTo("/booking");
        }
        else
        {
            errorMessage = "Forkert brugernavn eller adgangskode.";
        }
    }

    private void NavigateToRegister()
    {
        Navigation.NavigateTo("/register");
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "Brugernavn er påkrævet")]
        public string Username { get; set; }

        [Required(ErrorMessage = "Adgangskode er påkrævet")]
        public string Password { get; set; }
    }
}
