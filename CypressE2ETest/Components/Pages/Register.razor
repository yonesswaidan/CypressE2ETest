@page "/register"
@using System.ComponentModel.DataAnnotations
@inject UserService UserService
@inject NavigationManager Navigation
@inject IJSRuntime JS
@rendermode InteractiveServer


<link href="css/register.css" rel="stylesheet" />

<div class="auth-wrapper">
    <h1 class="page-title">Opret en ny konto</h1>

    @if (isSuccess)
    {
        <!-- Test: Vis succesbesked ved vellykket registrering -->
        <p style="color:green;">Kontoen blev oprettet!</p>
        <a href="/">Gå til login</a>
    }
    else
    {
        <!-- Test: Udfyld formular og submit -->
        <EditForm EditContext="registerEditContext" OnValidSubmit="HandleRegister" FormName="registerForm">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div>
                <label>Brugernavn:</label>
                <InputText @bind-Value="registerModel.Username" id="reg-username" class="form-control" />
                <ValidationMessage For="@(() => registerModel.Username)" />
            </div>

            <div>
                <label>Adgangskode:</label>
                <InputText @bind-Value="registerModel.Password" id="reg-password" type="password" class="form-control" />
                <ValidationMessage For="@(() => registerModel.Password)" />
            </div>

            <button type="submit" id="registerBtn">Opret Konto</button>
            <button type="button" id="goToLogin" @onclick="NavigateToLogin">Tilbage til login</button>
        </EditForm>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <!-- Test: Vis fejlbesked ved mislykket register -->
            <p style="color:red;">@errorMessage</p>
        }
    }
</div>

@code {
    private RegisterModel registerModel = new RegisterModel();
    private EditContext registerEditContext;

    private bool isSuccess = false;
    private string errorMessage;

    protected override void OnInitialized()
    {
        registerEditContext = new EditContext(registerModel);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // test: Sæt inputfelter og klik på login-knap
            await JS.InvokeVoidAsync("eval", @"
                window.setRegisterFields = (username, password) => {
                    const u = document.querySelector('#reg-username');
                    const p = document.querySelector('#reg-password');
                    if (u && p) {
                        u.value = username;
                        u.dispatchEvent(new Event('input', { bubbles: true }));
                        u.dispatchEvent(new Event('change', { bubbles: true }));

                        p.value = password;
                        p.dispatchEvent(new Event('input', { bubbles: true }));
                        p.dispatchEvent(new Event('change', { bubbles: true }));
                    }
                };

                window.clickGoToLogin = () => {
                    const btn = document.querySelector('#goToLogin');
                    if (btn) btn.click();
                };
            ");
        }
    }

    private async Task HandleRegister()
    {
        // Test: Forsøg at oprette bruger og vis respons
        var success = await UserService.RegisterUserAsync(registerModel.Username, registerModel.Password);
        if (success)
        {
            isSuccess = true;
            errorMessage = null;
        }
        else
        {
            isSuccess = false;
            errorMessage = "Registrering fejlede. Brugernavn kan allerede eksistere eller data er ugyldig.";
        }
    }

    private void NavigateToLogin()
    {
        Navigation.NavigateTo("/");
    }

    public class RegisterModel
    {
        [Required(ErrorMessage = "Brugernavn er påkrævet")]
        public string Username { get; set; }

        [Required(ErrorMessage = "Adgangskode er påkrævet")]
        public string Password { get; set; }
    }
}
